[config]
default_to_workspace = false

[env]
NO_STD_FLAGS = "--profile ${RUSTC_PROFILE} -Zbuild-std=core,compiler_builtins,alloc -Zbuild-std-features=compiler-builtins-mem -Zunstable-options --timings=html"
STD_FLAGS = "--profile ${RUSTC_PROFILE} --features std"
COV_FLAGS = { value = "--workspace --profile test --ignore-filename-regex .*test.*", condition = { env_not_set = ["COV_FLAGS"] } }
RUSTDOCFLAGS = "-D warnings -D missing_docs"

[env.development]
RUSTC_PROFILE = "dev"

[env.release]
RUSTC_PROFILE = "release"

[tasks.individual-package-targets]
script_runner = "@duckscript"
script = '''
args = get_env CARGO_MAKE_TASK_ARGS

if is_empty ${args}
  exit
end

1 = array ""
2 = split ${args} ,
3 = array_concat ${1} ${2}
joined_args = array_join ${3} " -p "
release ${1}
release ${2}
release ${3}

joined_args = trim ${joined_args}
set_env INDIVIDUAL_PACKAGE_TARGETS ${joined_args}
release ${joined_args}
'''

[tasks.build]
description = """Builds a single rust package with the standard library.

Customizations:
    -p [development|release]: Builds in debug or release. Default: development
    -e FEATURES=[feature,...]: Builds with the specified features. Default: none

Example:
    `cargo make build`
    `cargo make -p release build`
    `cargo make -e FEATURES=feature1,feature2 build`
"""
alias = "build-std"

[tasks.build-std]
description = """Builds crates in the repository with the standard library, and their examples.

Customizations:
    -p [development|release]: Builds in debug or release. Default: development
    -e FEATURES=[feature,...]: Builds with the specified features. Default: none

Example:
    `cargo make build-std`
    `cargo make -p release build-std`
    `cargo make build-std <package_name>`
"""
clear = true
command = "cargo"
args = ["build", "@@split(INDIVIDUAL_PACKAGE_TARGETS, )", "@@split(STD_FLAGS, )", "--examples"]
dependencies = ["individual-package-targets", "build-lib"]

[tasks.build-lib]
description = """Builds crates in the repository with the standard library.
Customizations:
    -p [development|release]: Builds in debug or release. Default: development
    -e FEATURES=[feature,...]: Builds with the specified features. Default: none

Example:
    `cargo make build-lib`
    `cargo make -p release build-lib`
    `cargo make build-lib <package_name>`
"""
clear = true
command = "cargo"
args = ["build", "@@split(INDIVIDUAL_PACKAGE_TARGETS, )", "@@split(STD_FLAGS, )"]
dependencies = ["individual-package-targets"]

[tasks.run-bin]
description = """Runs the standard library DXE core.

Example:
    `cargo make run-bin`
    `cargo make -p release run-bin`
"""
clear = true
command = "cargo"
args = ["run", "@@split(STD_FLAGS, )", "--example", "dxe_core_std"]

[tasks.build-bin]
description = """Builds the standard library DXE core.

Customizations:
    -p [development|release]: Builds in debug or release. Default: development

Example:
    `cargo make build-bin`
    `cargo make -p release build-bin`
"""
clear = true
command = "cargo"
args = ["build", "@@split(STD_FLAGS, )", "--example", "dxe_core_std"]

[tasks.check_no_std]
description = "Checks rust code for no_std build errors with results."
private = true
command = "cargo"
args = ["check", "--target", "x86_64-unknown-uefi", "@@split(NO_STD_FLAGS, )", "@@split(CARGO_MAKE_TASK_ARGS, )"]

[tasks.check_std]
description = "Checks rust code for std build errors with results."
private = true
command = "cargo"
args = ["check", "@@split(STD_FLAGS, )", "@@split(CARGO_MAKE_TASK_ARGS, )"]

[tasks.check_tests]
description = "Checks rust test code for build errors with results."
private = true
command = "cargo"
args = ["test", "--no-run", "@@split(CARGO_MAKE_TASK_ARGS, )"]

[tasks.check]
description = "Checks rust code for errors. Example `cargo make check`"
clear = true
run_task = [{ name = ["check_no_std", "check_std", "check_tests"], parallel = true }]

[tasks.test]
description = "Runs tests with native cargo test behavior. Example `cargo make test` or `cargo make test -p package_name -- --nocapture`"
clear = true
command = "cargo"
args = ["test", "@@split(CARGO_MAKE_TASK_ARGS,;)"]

[tasks.patina-test]
description = "Builds crates with Patina tests enabled. Example `cargo make patina-test`"
clear = true
command = "cargo"
args = ["build", "@@split(INDIVIDUAL_PACKAGE_TARGETS, )", "@@split(STD_FLAGS, )", "--features", "enable_patina_tests"]
dependencies = ["individual-package-targets"]

[tasks.generate-lockfile]
description = "Generate Cargo.lock file."
private = true
command = "cargo"
args = ["generate-lockfile"]

[tasks.coverage-collect]
description = "Run tests and collect coverage data without generating reports."
install_crate = false
clear = true
command = "cargo"
args = ["llvm-cov", "@@split(COV_FLAGS, )", "--no-report"]
dependencies = ["individual-package-targets"]

[tasks.coverage-lcov]
description = "Generate an LCOV coverage report from collected data."
install_crate = false
clear = true
command = "cargo"
args = ["llvm-cov", "report", "--lcov", "--output-path", "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/target/lcov.info"]

[tasks.coverage-html]
description = "Generate an HTML coverage report from collected data."
install_crate = false
clear = true
command = "cargo"
args = ["llvm-cov", "report", "--html", "--output-dir", "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/target/coverage"]

[tasks.coverage]
description = "Build and run all tests and calculate coverage (runs test once and generates LCOV and HTML reports)."
dependencies = ["coverage-collect", "coverage-lcov", "coverage-html"]
clear = true

[tasks.coverage-filter]
description = "Generates the coverage filter to ignore coverage data for other packages."
private = true
script_runner = "@duckscript"
script = '''
package = get_env PACKAGE
members = get_env CARGO_MAKE_CRATE_WORKSPACE_MEMBERS

1 = split ${members} ,

2 = array
for member in ${1}
    if not contains ${member} ${package}
        array_push ${2} ${member}
    end
end

joined = array_join ${2} "|"

set_env PACKAGE_COVERAGE_FILTER ${joined}
release ${1}
release ${2}
release ${joined_args}
release ${joined}
'''

[tasks.coverage-fail-package]
private = true
install_crate = false
description = """Generates Code coverage for $(PACKAGE) and fails the build if coverage is below 80%."""
dependencies = ["coverage-filter"]
command = "cargo"
args = ["llvm-cov", "--package", "${PACKAGE}", "--fail-under-lines", "80", "--ignore-filename-regex", "${PACKAGE_COVERAGE_FILTER}"]

[tasks.coverage-fail]
description = """Runs coverage on one or all packages and fails if coverage is below 80%.

Examples:
    `cargo make coverage-fail`
    `cargo make coverage-fail patina_dxe_core`
"""
script_runner = "@duckscript"
script = '''
1 = get_env CARGO_MAKE_CRATE_WORKSPACE_MEMBERS
2 = split ${1} ,
3 = get_env CARGO_MAKE_TASK_ARGS

if not is_empty ${3}
    set_env PACKAGE ${3}
    cm_run_task coverage-fail-package
else
    for member in ${2}
        4 = split ${member} /
        5 = array_pop ${4}
        set_env PACKAGE ${5}
        cm_run_task coverage-fail-package
        release ${4}
        release ${5}
    end
endif

release ${1}
release ${2}
release ${3}
'''

[tasks.build-aarch64]
description = "Builds crates in the repository for AARCH64"
clear = true
command = "cargo"
args = ["build", "@@split(INDIVIDUAL_PACKAGE_TARGETS, )", "--target", "aarch64-unknown-uefi", "@@split(NO_STD_FLAGS, )", ]
dependencies = ["individual-package-targets"]

[tasks.build-x64]
description = "Builds crates in the repository for X64"
clear = true
command = "cargo"
args = ["build", "@@split(INDIVIDUAL_PACKAGE_TARGETS, )", "--target", "x86_64-unknown-uefi", "@@split(NO_STD_FLAGS, )", ]
dependencies = ["individual-package-targets"]

[tasks.doc]
description = "Builds all rust documentation in the workspace. Example `cargo make doc`"
command = "cargo"
args = ["doc", "@@split(INDIVIDUAL_PACKAGE_TARGETS, )", "--features", "doc"]

[tasks.doc-open]
description = "Builds all rust documentation in the workspace and opens the documentation. Example `cargo make doc-open`"
clear = true
command = "cargo"
args = ["doc", "@@split(INDIVIDUAL_PACKAGE_TARGETS, )", "--features", "doc", "--open"]

[tasks.clippy]
description = "Run cargo clippy."
clear = true
command = "cargo"
args = ["clippy", "--all-targets", "--all-features", "--", "-D", "warnings"]

[tasks.fmt]
description = "Run cargo format."
clear = true
command = "cargo"
args = ["fmt", "--all"]

[tasks.cspell]
description = "Run cspell for spell checking." # npm install -g cspell@latest
script = "cspell --quiet  --no-progress --no-summary  --dot --gitignore -e \"{.git/**,.github/**,.vscode/**}\" ."

[tasks.deny]
description = "Run cargo deny."
install_crate = false
clear = true
command = "cargo"
args = ["deny", "check"]

[tasks.bench]
description = "Run cargo bench."
clear = true
command = "cargo"
args = ["bench", "@@split(CARGO_MAKE_TASK_ARGS,;)"]

[tasks.vet]
description = "Run cargo vet."
install_crate = false
clear = true
dependencies = ["generate-lockfile"]
command = "cargo"
args = ["vet", "--locked"]
ignore_errors = false

[tasks.all]
description = "Run all tasks for PR readiness."
dependencies = [
    "deny",
    "cspell",
    "clippy",
    "build",
    "build-x64",
    "build-aarch64",
    "test",
    "patina-test",
    "coverage",
    "fmt",
    "doc",
]
